#include "IsingModel.h"
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cmath>
#include <map>

int main() {
    int N = 32;  // Tamaño de la red
    int J = 1;   // Constante de interacción
    double T_min = 0.5;  // Temperatura mínima
    double T_max = 5.0;  // Temperatura máxima
    int num_T = 100;     // Número de puntos de temperatura
    int equilibrationSteps = 2e5;  // Pasos de equilibración
    int samplingSteps = 5e6;  // Pasos de muestreo
    // double T_fija = 2.0;  // Temperatura fija para análisis detallado
    // double beta_fija = 1.0 / T_fija;
    double dT = 0.01;  // Incremento de temperatura

    // Crear un objeto de la clase IsingModel para red N=6
    IsingModel ising(N);
    std :: cout << "Red de tamaño N = " << N << " creada\n";
    // Archivos de salida
    std::ofstream binderFile("N32_binder_vs_temperature.dat");
    std::ofstream magnetizationFile("N32_magnetization_vs_temperature.dat");
    std::ofstream energyFile("N6_temp_energy_cv.dat");

    // **Primera Parte: Cálculo de Energía y Calor Específico para T fija**
    int energy = ising.energyIsingPeriodic(N, J, ising.getSpins());

    // // Fase de equilibración con el algoritmo Wolff
    // for (int step = 0; step < equilibrationSteps; ++step) {
    //     ising.wolffCluster(N, J, T_fija, energy);
    // }

    // // Calcular energía y calor específico usando el algoritmo Wolff
    // double E_mean = ising.AverageEnergyWolff(J, beta_fija, samplingSteps);
    // double E2_mean = ising.SquareAverageEnergyWolff(J, beta_fija, samplingSteps);
    // double heat_capacity = (E2_mean - E_mean * E_mean) / (T_fija * T_fija * N * N);

    // // Imprimir y guardar resultados
    // std::cout << "T: " << T_fija << ", <E/N>: " << E_mean / (N * N)
    //           << ", C_v: " << heat_capacity << std::endl;
    // energyFile << T_fija << " " << E_mean / (N * N) << " " << heat_capacity << std::setprecision(7) << std::endl;
    // energyFile.close();

    // **Segunda Parte: Cálculo de Magnetización y Binder Cumulant sobre un rango de temperaturas**
    for (double T = 0; T <= T_max; T += dT) {
        // double T = T_min + t * (T_max - T_min) / (num_T - 1);
        // double beta = 1.0 / T;

        // Inicializar energía para cada temperatura
        energy = ising.energyIsingPeriodic(N, J, ising.getSpins());

        // Fase de equilibración
        for (int step = 0; step < equilibrationSteps; ++step) {
            ising.wolffCluster(N, J, T, energy);
        }

        // Medición de la magnetización promedio
        double magnetization_sum = 0.0;
        for (int step = 0; step < samplingSteps; ++step) {
            ising.wolffCluster(N, J, T, energy);
            magnetization_sum += ising.magnetization();
        }
        double magnetization_mean = magnetization_sum / samplingSteps;

        // Guardar y mostrar la magnetización promedio
        magnetizationFile << T << " " << magnetization_mean << std::endl;
        std::cout << "T: " << T << " Magnetización promedio: " << magnetization_mean << std::endl;

        // // Calcular el Binder cumulant para cada temperatura
        // double binderCumulant = ising.binderCumulant(T, J, samplingSteps);
        // binderFile << T << "\t" << binderCumulant << "\n";
        // std::cout << "T = " << T << ", Binder Cumulant = " << binderCumulant << std::endl;
    }
        for (double T = T_min; T <= T_max; T += dT) {
        // Calcular el Binder cumulant 
        double binderCumulant = ising.binderCumulant(T, J, samplingSteps);

        // Escribir el Binder cumulant al archivo
        binderFile << T << "\t" << binderCumulant << "\n";
        std::cout << "T = " << T << ", Binder Cumulant = " << binderCumulant << std::endl;
    }

    // Cerrar archivos
    magnetizationFile.close();
    binderFile.close();
    
    std::cout << "Cálculos completados. Datos guardados en archivos correspondientes.\n";
    return 0;
}
